# enable support of hooks
autoload -U add-zsh-hook
function reset_rprompt() {
  RPROMPT=""
}
add-zsh-hook precmd reset_rprompt

# change dir if input is no executable
setopt autocd

# cycle with <TAB> through options
zstyle ':completion:*' menu select

# complete till first ambigious character
setopt menu_complete

# show error if nothing matches
setopt nomatch

# init autocompletion
autoload compinit && compinit

# save each command immediately in the history file
setopt inc_append_history

# share history file between multiple zsh shells
setopt share_history

# ignore duplicates in the history
setopt hist_ignore_all_dups

# use pushd instead of cd
setopt autopushd

# ignore duplicates in the directory history
setopt pushdignoredups

# print no message
setopt pushdsilent

# invert meaning of + and - (highest element in the stack hast highest order)
setopt pushdminus

# push directories relative to home dir
setopt pushdtohome

# treat parts of an path as different words
# influences the behaviour of e.g. CTRL-W
autoload -U select-word-style
select-word-style bash

# warn if regex does not match anything
setopt nomatch

# no beep...
unsetopt beep notify

# Load bundles generated by antibody (plugin manager for zsh).
# https://github.com/getantibody/antibody
source "$HOME/.zsh_plugins.sh"

# Load my own completions
fpath+=( "$HOME/.local/share/chezmoi/completions" )

# enable direnv hook
if [[ -x "$(which direnv 2> /dev/null)" ]]; then
    source <(direnv hook zsh)
fi

# Some default flags configured via aliases
alias grep='grep --color'

# Define my aliases
alias please='sudo'
alias gpu='git pu'
alias ts='tig status'
alias coma='git commit --amend'
alias ll='ls -l --color -h'
alias la='ll -a'
alias kc=kubectl
alias ka=kafkactl
alias gpg=gpg2

# https://github.com/sharkdp/bat
if [[ -x "$(which bat 2> /dev/null)" ]]; then
    alias cat='bat --style=plain'
fi

if [[ -x "$(which cwtch 2> /dev/null)" ]]; then
    alias watch=cwtch
fi

if [[ -x "$(which tldr 2> /dev/null)" ]]; then
    alias help=tldr
fi

# https://github.com/bugaevc/wl-clipboard
if [[ -x "$(which wl-copy 2> /dev/null)" ]]; then
    alias clipboard=wl-copy
fi

if [[ -x "$(which gron 2> /dev/null)" ]]; then
    alias ungron='gron --ungron'
fi

if [[ -x "$(which prettyping 2> /dev/null)" ]]; then
    alias ping='prettyping --nolegend'
fi

if [[ -x "$(which fzf 2> /dev/null)" ]]; then
    # Extra zfz key bindings
    source "$HOME/.local/share/chezmoi/fzf/shell/key-bindings.zsh"

    # Use fzf in auto-completion
    [[ $- == *i* ]] && source "$HOME/.local/share/chezmoi/fzf/shell/completion.zsh" 2> /dev/null
fi

if [ -d "$HOME/.krew" ]; then
    export PATH="$HOME/.krew/bin:$PATH"
    alias krew='kubectl krew'
fi

if [ -e "$HOME/.krew/bin/kubectl-ctx" ]; then
    alias kubectx='kubectl ctx'
fi

if [ -e "$HOME/.krew/bin/kubectl-ns" ]; then
    alias kubens='kubectl ns'
fi

if [[ -x "$(which broot 2> /dev/null)" ]]; then
    # This script was automatically generated by the broot program
    # More information can be found in https://github.com/Canop/broot
    # This function starts broot and executes the command
    # it produces, if any.
    # It's needed because some shell commands, like `cd`,
    # have no useful effect if executed in a subshell.
    function br {
        local cmd cmd_file code
        cmd_file=$(mktemp)
        if broot --outcmd "$cmd_file" "$@"; then
            cmd=$(<"$cmd_file")
            rm -f "$cmd_file"
            eval "$cmd"
        else
            code=$?
            rm -f "$cmd_file"
            return "$code"
        fi
    }
fi


# A function to allow traversing up the file system using multiple dots (e.g. ....)
cd() {
  if [[ "$1" =~ ^\\.{1,}$ ]]; then
    for (( i=0; i<$(( ${#1} - 1 )); i++ )); do
      builtin cd ..
    done
  else
    builtin cd "$@"
  fi
}

# Find and delete merged branches in a git repository.
git-delete-merged-branches() {
    git branch --merged | \
    grep -v -E '(master|develop)' \
    xargs git branch -d
}

pods() {
    if [ "$#" -eq 1 ]; then
        watch "kubectl -n $1 get pods"
    else
        watch "kubectl get pods"
    fi
}

nodes() {
    watch "kubectl get nodes"
}

